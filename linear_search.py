{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "linear_search.py",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMsx5HnqtqTzqyRkdSyflIb"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 139,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5li-w5IvHOoL",
        "outputId": "53fb3f7a-bff1-4d76-e56e-19359f8040d2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum value: 7\n",
            "Maximum value: 99\n",
            "rand_list: [46, 25, 64, 5, 72, 98, 40, 30, 98, 67]\n",
            "Maximum value: 98\n",
            ">>>: 2\n",
            ">>>: Result: value x not in list a\n",
            ">>>: [2, 3]\n",
            ">>>: Result: value x not in list a\n",
            ">>>: [1, 1]\n",
            ">>>: Result: value x not in array\n",
            ">>>: [[0, 0], [1, 0], [2, 2]]\n",
            ">>>: [[1, 2]]\n"
          ]
        }
      ],
      "source": [
        "# Linear Search - sequentially searching each element of the list until a match is found (whole list being searched)\n",
        "# Asymptotically, the expected cost of linear search is O(n)\n",
        "\n",
        "# Finding the max value \n",
        "\n",
        "def max(a):\n",
        "  maximum = a[0]\n",
        "  for i in range(1, len(a)):\n",
        "    if a[i] > maximum:\n",
        "      maximum = a[i]\n",
        "  return maximum \n",
        "\n",
        "max1 = max([1, 2, 3, 4, 5, 6, 7])\n",
        "print(f\"Maximum value: {max1}\")\n",
        "max2 = max([x for x in range(1, 101, 2)])\n",
        "print(f\"Maximum value: {max2}\")\n",
        "import random\n",
        "rand_list = [random.randint(1, 101) for x in range(1, 11)]\n",
        "print(f\"rand_list: {rand_list}\")\n",
        "max3 = max(rand_list)\n",
        "print(f\"Maximum value: {max3}\")\n",
        "\n",
        "# Time complexity : O(n)\n",
        "# For ex) max1 a[0] = 1, a[0] < a[1], a[1] < a[2] ... \n",
        "\n",
        "# Searching for the index of value x\n",
        "\n",
        "def search(a, x):\n",
        "  for i in range(len(a)):\n",
        "    if x == a[i]:\n",
        "      return i\n",
        "  return \"Result: value x not in list a\"\n",
        "\n",
        "search1 = search([1, 2, 3, 4, 5, 6, 7], 3)\n",
        "print(f\">>>: {search1}\")  \n",
        "\n",
        "search2 = search([1, 2, 3, 4, 5, 6, 7], 9)\n",
        "print(f\">>>: {search2}\")\n",
        "\n",
        "# Searching for multiple indices of value x \n",
        "\n",
        "search_idx = []\n",
        "def search_mul(a, x):\n",
        "  while True:\n",
        "    if a.count(x) == 0:\n",
        "      return \"Result: value x not in list a\"\n",
        "      break\n",
        "    for i in range(len(a)):\n",
        "      if a[i] == x:\n",
        "        search_idx.append(i)\n",
        "    return search_idx\n",
        "search3 = search_mul([1, 2, 3, 3, 4, 5, 6], 3)\n",
        "print(f\">>>: {search3}\")\n",
        "search4 = search_mul([1, 2, 3, 4, 5, 6, 7], 9)\n",
        "print(f\">>>: {search4}\")\n",
        "\n",
        "# Searching for the index of value x - 2-Dimensional array\n",
        "\n",
        "def search_td(arr, x):\n",
        "  for r in range(len(arr)):\n",
        "    for c in range(len(arr[0])):\n",
        "      if x == arr[r][c]:\n",
        "        return [r, c]\n",
        "  return \"Result: value x not in array\"\n",
        "\n",
        "arr = [\n",
        "       [1, 2, 3, 4],\n",
        "       [5, 6, 7, 8],\n",
        "       [9, 10, 11, 12]\n",
        "       ]\n",
        "\n",
        "print(\">>>:\", search_td(arr, 6))\n",
        "print(\">>>:\", search_td(arr, 13))\n",
        "\n",
        "# Searching for multiple indices of value x - 2-Dimensional array\n",
        "\n",
        "def search_tdmul(arr, x):\n",
        "  arr_idx = []\n",
        "  while True:\n",
        "    for r in range(len(arr)):\n",
        "      for c in range(len(arr[0])):\n",
        "        if arr[r][c] == x:\n",
        "          arr_idx.append([r, c])\n",
        "    return arr_idx\n",
        "\n",
        "arr2 = [\n",
        "        [1, 2, 3, 4],\n",
        "        [1, 6, 7, 8],\n",
        "        [9, 10, 1, 12]\n",
        "        ]\n",
        "\n",
        "search5 = search_tdmul(arr2, 1)\n",
        "print(\">>>:\", search5)\n",
        "search6 = search_tdmul(arr2, 7)\n",
        "print(\">>>:\", search6)"
      ]
    }
  ]
}